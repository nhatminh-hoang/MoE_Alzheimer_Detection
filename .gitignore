# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to guide developers to use a
#   specific Python version - in which case you would add .python-version to
#   project root, to make it clear which version of Python is required.
#   .python-version should *not* be committed for applications, as it is
#   specific to the development setup of each developer.
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in
#   version control.
#   However, in case of collaboration, if having platform-specific dependencies
#   or dependencies having no cross-platform support, pipenv may install
#   platform-specific packages.
#   So, avoid adding Pipfile.lock to version control.
Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include
#   poetry.lock in version control.
#   However, this file is also platform-specific.
poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include
#   pdm.lock in version control.
pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, it is recommended
#   to include it in version control.
# .pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be obtained at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global .gitignore or merged into this file. For a specific গমন
.idea/
*.iws

# VS Code
.vscode/

# Data folder
data/

# Models weights folder
models/saved_models/
models/ModernBERT-base_model/
models/ModernBERT-base_tokenizer/
models/ModernBERT-large_model/
models/ModernBERT-large_tokenizer/
train_outs/
